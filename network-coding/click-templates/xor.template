// address info for each of the interfaces
classifier0     :: Classifier(
        12/0806 20/0001, /* arp requests */
        12/0800,
        -,
        );

classifier1     :: Classifier(
        12/0806 20/0001, /* arp requests */
        12/0800,
        -,
        );

classifier2     :: Classifier(
        12/0806 20/0001, /* arp requests */
        12/0800,
        -,
        );

classifier3     :: Classifier(
        12/0806 20/0001, /* arp requests */
        12/0800,
        -,
        );

ipclassifier    :: IPClassifier(
        dst host DSTIP
        );

data_in                 ::      FromDevice(ETH1);
left_in_device          ::      FromDevice(ETH2);
center_in_device        ::      FromDevice(ETH3);
right_in_device         ::      FromDevice(ETH4);

data_out                ::      ToDevice(ETH1);
left_out_device         ::      ToDevice(ETH2);
center_out_device       ::      ToDevice(ETH3);
right_out_device        ::      ToDevice(ETH4);

chip    :: MarkIPHeader(14);
chip1   :: MarkIPHeader(14);

encode :: XORMsg(3,0,100,1500);
decode :: XORMsg(3,1,100,1500);


/* handle the arp requests */
data_in         ->      classifier0[0]  ->      Print("a")      ->      ARPResponder(DSTIP DSTROUTE THISMAC1)        ->     data_out;

// no-ops
left_in_device  ->      classifier1[0]  ->      Print("b")      ->      ARPResponder(SRCIP SRCROUTE THISMAC2)        ->     left_out_device;
center_in_device ->     classifier2[0]  ->      Print("c")      ->      ARPResponder(SRCIP SRCROUTE THISMAC3)        ->     center_out_device;
right_in_device ->      classifier3[0]  ->      Print("d")      ->      ARPResponder(SRCIP SRCROUTE THISMAC4)        ->     right_out_device;


// if this is an ip packet
// and it is dest host y -> rewrite the eth header now
// then send it to XOR
classifier0[1]  ->       chip    ->      ipclassifier[0] ->      encode;

// then these will be the encoded chunks
encode[0]      ->       EtherRewrite(THISMAC2, NEIGHMAC2)      ->      left_out_device;
encode[1]      ->       EtherRewrite(THISMAC3, NEIGHMAC3)      ->      center_out_device;
encode[2]      ->       EtherRewrite(THISMAC4, NEIGHMAC4)      ->      right_out_device;


// if the packet is coming over one of or other links, it means its already encodeed and ready to be decodeed.
classifier1[1]  ->      EtherRewrite(THISMAC2, NEIGHMAC2)      ->      chip1   ->      decode;
classifier2[1]  ->      EtherRewrite(THISMAC3, NEIGHMAC3)      ->      chip1   ->      decode;
classifier3[1]  ->      EtherRewrite(THISMAC4, NEIGHMAC4)      ->      chip1   ->      decode;

classifier0[2]  ->      Discard;
classifier1[2]  ->      Discard;
classifier2[2]  ->      Discard;
classifier3[2]  ->      Discard;


// swapped dst and src mack because once the packet is prepped, we want it to have
// our neighbors mac address as the dstination.
decode ->      EtherRewrite(DSTMAC, SRCMAC)->      data_out;
